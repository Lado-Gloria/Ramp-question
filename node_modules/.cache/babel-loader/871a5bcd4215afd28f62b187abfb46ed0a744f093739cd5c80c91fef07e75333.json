{"ast":null,"code":"var _jsxFileName = \"/home/user/Downloads/ramp-fe-challenge/src/components/Transactions/index.tsx\",\n  _s3 = $RefreshSig$();\nimport { useCustomFetch } from \"../../hooks/useCustomFetch\"; // Adjust the path based on your folder structure\n\n// Adjust the path based on your folder structure\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = ({\n  transactions\n}) => {\n  _s3();\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n  const [transactionsList, setTransactionsList] = useState([]);\n  _s(useEffect(_s(() => {\n    _s();\n    const fetchTransactions = useCustomFetch(\"/transactions\");\n    fetchTransactions.then(transactions => {\n      setTransactionsList(transactions);\n    });\n  }, \"EvfU9uJ0qcKL7ezSiO4oNLhvcIk=\", false, function () {\n    return [useCustomFetch];\n  }), []), \"EvfU9uJ0qcKL7ezSiO4oNLhvcIk=\", false, function () {\n    return [useCustomFetch];\n  });\n  const setTransactionApproval = _s2(useCallback(_s2(async ({\n    transactionId,\n    newValue\n  }) => {\n    _s2();\n    await useCustomFetch(\"setTransactionApproval\", {\n      transactionId,\n      value: newValue\n    });\n    // Clear the cache for the paginatedTransactions and transactionsByEmployee endpoints\n    // since the setTransactionApproval action could have changed the data for those endpoints\n    useCustomFetch.clearCacheByEndpoint([\"paginatedTransactions\", \"transactionsByEmployee\"]);\n  }, \"wF/tUmcP+WMkjFdh4/iriyhZ68M=\", false, function () {\n    return [useCustomFetch];\n  }), []), \"wF/tUmcP+WMkjFdh4/iriyhZ68M=\", false, function () {\n    return [useCustomFetch];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: transactionsList.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n      transaction: transaction,\n      loading: loading,\n      setTransactionApproval: setTransactionApproval\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s3(Transactions, \"I3lero3ghAFVYXA3AmUW9Wvz8gs=\");\n_c = Transactions;\nvar _c;\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useCustomFetch","TransactionPane","jsxDEV","_jsxDEV","Transactions","transactions","_s3","_s","$RefreshSig$","_s2","transactionsList","setTransactionsList","useState","useEffect","fetchTransactions","then","setTransactionApproval","useCallback","transactionId","newValue","value","clearCacheByEndpoint","children","map","transaction","loading","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/user/Downloads/ramp-fe-challenge/src/components/Transactions/index.tsx"],"sourcesContent":["import { useCustomFetch } from \"../../hooks/useCustomFetch\"; // Adjust the path based on your folder structure\nimport { SetTransactionApprovalParams } from \"../../utils/types\"; // Adjust the path based on your folder structure\nimport { TransactionPane } from \"./TransactionPane\";\nimport { SetTransactionApprovalFunction, TransactionsComponent } from \"./types\";\n\nexport const Transactions: TransactionsComponent = ({ transactions }) => {\n  const [transactionsList, setTransactionsList] = useState([]);\n\n  useEffect(() => {\n    const fetchTransactions = useCustomFetch(\"/transactions\");\n    fetchTransactions.then((transactions) => {\n      setTransactionsList(transactions);\n    });\n  }, []);\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      await useCustomFetch<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue,\n      });\n      // Clear the cache for the paginatedTransactions and transactionsByEmployee endpoints\n      // since the setTransactionApproval action could have changed the data for those endpoints\n      useCustomFetch.clearCacheByEndpoint([\"paginatedTransactions\", \"transactionsByEmployee\"]);\n    },\n    []\n  );\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {transactionsList.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={transaction}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n    </div>\n  )\n};"],"mappings":";;AAAA,SAASA,cAAc,QAAQ,4BAA4B,CAAC,CAAC;;AACK;AAClE,SAASC,eAAe,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGpD,OAAO,MAAMC,YAAmC,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;IAAAC,GAAA,GAAAD,YAAA;EACvE,MAAM,CAACE,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAE5DL,EAAA,CAAAM,SAAS,CAAAN,EAAA,CAAC,MAAM;IAAAA,EAAA;IACd,MAAMO,iBAAiB,GAAGd,cAAc,CAAC,eAAe,CAAC;IACzDc,iBAAiB,CAACC,IAAI,CAAEV,YAAY,IAAK;MACvCM,mBAAmB,CAACN,YAAY,CAAC;IACnC,CAAC,CAAC;EACJ,CAAC;IAAA,QAJ2BL,cAAc;EAAA,IAIvC,EAAE,CAAC;IAAA,QAJsBA,cAAc;EAAA;EAM1C,MAAMgB,sBAAsB,GAAAP,GAAA,CAAGQ,WAAW,CAAAR,GAAA,CACxC,OAAO;IAAES,aAAa;IAAEC;EAAS,CAAC,KAAK;IAAAV,GAAA;IACrC,MAAMT,cAAc,CAAqC,wBAAwB,EAAE;MACjFkB,aAAa;MACbE,KAAK,EAAED;IACT,CAAC,CAAC;IACF;IACA;IACAnB,cAAc,CAACqB,oBAAoB,CAAC,CAAC,uBAAuB,EAAE,wBAAwB,CAAC,CAAC;EAC1F,CAAC;IAAA,QAPOrB,cAAc;EAAA,IAQtB,EACF,CAAC;IAAA,QATSA,cAAc;EAAA,EASvB;EAED,oBACEG,OAAA;IAAK,eAAY,uBAAuB;IAAAmB,QAAA,EACrCZ,gBAAgB,CAACa,GAAG,CAAEC,WAAW,iBAChCrB,OAAA,CAACF,eAAe;MAEduB,WAAW,EAAEA,WAAY;MACzBC,OAAO,EAAEA,OAAQ;MACjBT,sBAAsB,EAAEA;IAAuB,GAH1CQ,WAAW,CAACE,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIpB,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACxB,GAAA,CAnCWF,YAAmC;AAAA2B,EAAA,GAAnC3B,YAAmC;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}